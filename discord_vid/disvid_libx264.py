"""
discord vid libx264 implementation
"""

import os
from install.install_ffmpeg import FFMPEG_EXE

# These are defined here because different encoders
# Have different overheads
TARGET_FILE_SIZE = 8100
TARGET_FILE_SIZE_NITRO = 48500


def extension():
    """return file extension for file converted using this module"""
    return "_libx264.mp4"


def guess_target(max_size):
    """
    guesses the target size based on max size and AI
    """
    if max_size <= 9000:
        return 1.02 * max_size
    return 0.97 * max_size

def get_scale_cmd(resolution, _):
    """return scale command and whehter it occurs in encode or decode"""
    if resolution is None:
        return None, None
    return ["encode", ["-vf", resolution]]


def generate_file_cmd(v_rate, options):
    """
    Generate file with libx264 2-pass options auto-injected
    """

    input_options, output_options = options
    v_rate /= 1024

    output_no_file = output_options[:-1]
    output_file = output_options[-1]

    # fmt: off
    command1 = ( #first pass
        [FFMPEG_EXE,  "-y"]
        + "-v quiet -stats".split()
        + input_options
        + "-threads 8 -speed 4 -row-mt 1 -tile-columns 2 -vsync cfr".split()
        + f"-b:v {v_rate:.0f}k -minrate {v_rate/2:.0f}k".split()
        + f"-maxrate {v_rate*2:.0f}k -bufsize 1M".split()
        + "-an -pass 1 -f mp4".split()
        + output_no_file
        + f"-passlogfile {output_file}".split()
        + ["NUL"]
        )

    command2 = ( #second pass
        [FFMPEG_EXE, "-y"]
        + "-v quiet -stats".split()
        + input_options
        + f"-b:v {v_rate:.0f}k -minrate {v_rate/2:.0f}k".split()
        + f"-maxrate {v_rate*2:.0f}k -bufsize 1M".split()
        + "-threads 8 -speed 2 -row-mt 1 -tile-columns 2".split()
        + "-pass 2".split()
        + f"-passlogfile {output_file}".split()
        + output_options
    )
    # fmt: on

    commands = [command1, command2]
    return (commands, output_file, delete_logs)


def safe_delete(path):
    """safely deletes a file if it exists"""
    try:
        os.remove(path)
    except OSError as error:
        print(error)


def delete_logs(prefix):
    """
    Deletes logs generated by ffmpeg2pass
    """
    safe_delete(f"{prefix}-0.log")
    safe_delete(f"{prefix}-0.log.mbtree")
